package laba;

import static laba.TokenKind.*;

public class Scanner {
	private SourceFile source;

	private char currentChar;
	private StringBuffer currentSpelling = new StringBuffer();

	public Scanner(SourceFile source) {
		this.source = source;

		currentChar = source.getSource();
	}

	private void takeIt() {
		currentSpelling.append(currentChar);
		currentChar = source.getSource();
	}

	private boolean isLetter(char c) {
		return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z';
	}

	private boolean isDigit(char c) {
		return c >= '0' && c <= '9';
	}

	private boolean isBoolean() {
		char[] trueChars = "rue".toCharArray();
		char[] falseChars = "alse".toCharArray();
		if (currentChar == 't') {
			for (char ch : trueChars) {
				takeIt();
				if (currentChar != ch)
					return false;
			}
		} else if (currentChar == 'f') {
			for (char ch : falseChars) {
				takeIt();
				if (currentChar != ch)
					return false;
			}
		}
		return true;
	}

	private void scanSeparator() {
		switch (currentChar) {
		case '#':
			takeIt();
			while (currentChar != SourceFile.EOL && currentChar != SourceFile.EOT)
				takeIt();

			if (currentChar == SourceFile.EOL)
				takeIt();
			break;

		case ' ':
		case '\n':
		case '\r':
		case '\t':
			takeIt();
			break;
		}
	}

	private TokenKind scanToken() {
		if (isBoolean()) {
			return BOOLLITERAL;
		} 
		else if (isLetter(currentChar)) {
			takeIt();
			while (isLetter(currentChar) || isDigit(currentChar))
				takeIt();

			return IDENTIFIER;

		} else if (isDigit(currentChar)) {
			takeIt();
			while (isDigit(currentChar))
				takeIt();

			return INTEGERLITERAL;

		}
		switch (currentChar) {
		case '+':
		case '-':
		case '*':
		case '/':
			takeIt();
			return OPERATOR;

		case '8':
			takeIt();
			if (currentChar == '=') {
				takeIt();
				return OPERATOR;
			} else
				return ERROR;

		case ';':
			takeIt();
			return SEMICOLON;

		case SourceFile.EOT:
			return EOT;

		default:
			takeIt();
			return ERROR;
		}
	}

	public Token scan() {
		while (currentChar == '#' || currentChar == '\n' || currentChar == '\r' || currentChar == '\t'
				|| currentChar == ' ')
			scanSeparator();

		currentSpelling = new StringBuffer("");
		TokenKind kind = scanToken();

		return new Token(kind, new String(currentSpelling));
	}
}
